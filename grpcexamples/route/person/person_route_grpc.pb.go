// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package person

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PersonRouteClient is the client API for PersonRoute service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PersonRouteClient interface {
	// simple rpc
	// Obtains a person at a given id
	GetPerson(ctx context.Context, in *PersonQuery, opts ...grpc.CallOption) (*PersonResponse, error)
	// server-to-client streaming RPC
	// Obtains persons within the given name
	ListPerson(ctx context.Context, in *PersonQuery, opts ...grpc.CallOption) (PersonRoute_ListPersonClient, error)
	// client-to-server streaming RPC
	// Save persons and return a PersonSaveSummary
	SavePerson(ctx context.Context, opts ...grpc.CallOption) (PersonRoute_SavePersonClient, error)
	// bidirectional streaming RPC
	GetPersonChat(ctx context.Context, opts ...grpc.CallOption) (PersonRoute_GetPersonChatClient, error)
}

type personRouteClient struct {
	cc grpc.ClientConnInterface
}

func NewPersonRouteClient(cc grpc.ClientConnInterface) PersonRouteClient {
	return &personRouteClient{cc}
}

func (c *personRouteClient) GetPerson(ctx context.Context, in *PersonQuery, opts ...grpc.CallOption) (*PersonResponse, error) {
	out := new(PersonResponse)
	err := c.cc.Invoke(ctx, "/PersonRoute/GetPerson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personRouteClient) ListPerson(ctx context.Context, in *PersonQuery, opts ...grpc.CallOption) (PersonRoute_ListPersonClient, error) {
	stream, err := c.cc.NewStream(ctx, &PersonRoute_ServiceDesc.Streams[0], "/PersonRoute/ListPerson", opts...)
	if err != nil {
		return nil, err
	}
	x := &personRouteListPersonClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PersonRoute_ListPersonClient interface {
	Recv() (*PersonResponse, error)
	grpc.ClientStream
}

type personRouteListPersonClient struct {
	grpc.ClientStream
}

func (x *personRouteListPersonClient) Recv() (*PersonResponse, error) {
	m := new(PersonResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *personRouteClient) SavePerson(ctx context.Context, opts ...grpc.CallOption) (PersonRoute_SavePersonClient, error) {
	stream, err := c.cc.NewStream(ctx, &PersonRoute_ServiceDesc.Streams[1], "/PersonRoute/SavePerson", opts...)
	if err != nil {
		return nil, err
	}
	x := &personRouteSavePersonClient{stream}
	return x, nil
}

type PersonRoute_SavePersonClient interface {
	Send(*PersonRequest) error
	CloseAndRecv() (*PersonSaveSummary, error)
	grpc.ClientStream
}

type personRouteSavePersonClient struct {
	grpc.ClientStream
}

func (x *personRouteSavePersonClient) Send(m *PersonRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *personRouteSavePersonClient) CloseAndRecv() (*PersonSaveSummary, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PersonSaveSummary)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *personRouteClient) GetPersonChat(ctx context.Context, opts ...grpc.CallOption) (PersonRoute_GetPersonChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &PersonRoute_ServiceDesc.Streams[2], "/PersonRoute/GetPersonChat", opts...)
	if err != nil {
		return nil, err
	}
	x := &personRouteGetPersonChatClient{stream}
	return x, nil
}

type PersonRoute_GetPersonChatClient interface {
	Send(*PersonQuery) error
	Recv() (*PersonResponse, error)
	grpc.ClientStream
}

type personRouteGetPersonChatClient struct {
	grpc.ClientStream
}

func (x *personRouteGetPersonChatClient) Send(m *PersonQuery) error {
	return x.ClientStream.SendMsg(m)
}

func (x *personRouteGetPersonChatClient) Recv() (*PersonResponse, error) {
	m := new(PersonResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PersonRouteServer is the server API for PersonRoute service.
// All implementations must embed UnimplementedPersonRouteServer
// for forward compatibility
type PersonRouteServer interface {
	// simple rpc
	// Obtains a person at a given id
	GetPerson(context.Context, *PersonQuery) (*PersonResponse, error)
	// server-to-client streaming RPC
	// Obtains persons within the given name
	ListPerson(*PersonQuery, PersonRoute_ListPersonServer) error
	// client-to-server streaming RPC
	// Save persons and return a PersonSaveSummary
	SavePerson(PersonRoute_SavePersonServer) error
	// bidirectional streaming RPC
	GetPersonChat(PersonRoute_GetPersonChatServer) error
	mustEmbedUnimplementedPersonRouteServer()
}

// UnimplementedPersonRouteServer must be embedded to have forward compatible implementations.
type UnimplementedPersonRouteServer struct {
}

func (UnimplementedPersonRouteServer) GetPerson(context.Context, *PersonQuery) (*PersonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPerson not implemented")
}
func (UnimplementedPersonRouteServer) ListPerson(*PersonQuery, PersonRoute_ListPersonServer) error {
	return status.Errorf(codes.Unimplemented, "method ListPerson not implemented")
}
func (UnimplementedPersonRouteServer) SavePerson(PersonRoute_SavePersonServer) error {
	return status.Errorf(codes.Unimplemented, "method SavePerson not implemented")
}
func (UnimplementedPersonRouteServer) GetPersonChat(PersonRoute_GetPersonChatServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPersonChat not implemented")
}
func (UnimplementedPersonRouteServer) mustEmbedUnimplementedPersonRouteServer() {}

// UnsafePersonRouteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PersonRouteServer will
// result in compilation errors.
type UnsafePersonRouteServer interface {
	mustEmbedUnimplementedPersonRouteServer()
}

func RegisterPersonRouteServer(s grpc.ServiceRegistrar, srv PersonRouteServer) {
	s.RegisterService(&PersonRoute_ServiceDesc, srv)
}

func _PersonRoute_GetPerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersonQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonRouteServer).GetPerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PersonRoute/GetPerson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonRouteServer).GetPerson(ctx, req.(*PersonQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonRoute_ListPerson_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PersonQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PersonRouteServer).ListPerson(m, &personRouteListPersonServer{stream})
}

type PersonRoute_ListPersonServer interface {
	Send(*PersonResponse) error
	grpc.ServerStream
}

type personRouteListPersonServer struct {
	grpc.ServerStream
}

func (x *personRouteListPersonServer) Send(m *PersonResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PersonRoute_SavePerson_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PersonRouteServer).SavePerson(&personRouteSavePersonServer{stream})
}

type PersonRoute_SavePersonServer interface {
	SendAndClose(*PersonSaveSummary) error
	Recv() (*PersonRequest, error)
	grpc.ServerStream
}

type personRouteSavePersonServer struct {
	grpc.ServerStream
}

func (x *personRouteSavePersonServer) SendAndClose(m *PersonSaveSummary) error {
	return x.ServerStream.SendMsg(m)
}

func (x *personRouteSavePersonServer) Recv() (*PersonRequest, error) {
	m := new(PersonRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PersonRoute_GetPersonChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PersonRouteServer).GetPersonChat(&personRouteGetPersonChatServer{stream})
}

type PersonRoute_GetPersonChatServer interface {
	Send(*PersonResponse) error
	Recv() (*PersonQuery, error)
	grpc.ServerStream
}

type personRouteGetPersonChatServer struct {
	grpc.ServerStream
}

func (x *personRouteGetPersonChatServer) Send(m *PersonResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *personRouteGetPersonChatServer) Recv() (*PersonQuery, error) {
	m := new(PersonQuery)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PersonRoute_ServiceDesc is the grpc.ServiceDesc for PersonRoute service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PersonRoute_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PersonRoute",
	HandlerType: (*PersonRouteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPerson",
			Handler:    _PersonRoute_GetPerson_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListPerson",
			Handler:       _PersonRoute_ListPerson_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SavePerson",
			Handler:       _PersonRoute_SavePerson_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetPersonChat",
			Handler:       _PersonRoute_GetPersonChat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "route/person/person_route.proto",
}
